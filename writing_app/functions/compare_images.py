from flask import Flask, request, jsonify
import cv2
import numpy as np
from skimage.metrics import structural_similarity as ssim
import os
import uuid

app = Flask(__name__)

# üìå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô BASE_DIR ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö
BASE_DIR = os.path.abspath(os.path.join(os.getcwd(), "..", "assets"))

@app.route("/compare", methods=["POST"])
def compare_images():
    if "image" not in request.files or "language" not in request.form:
        return jsonify({"error": "Missing image or language parameter"}), 400

    language = request.form["language"].strip()
    template_name = request.form.get("template", "").strip()
    language_folder = os.path.join(BASE_DIR, language)

    if not os.path.exists(language_folder):
        return jsonify({"error": f"Language folder '{language}' not found"}), 400

    template_files = sorted(os.listdir(language_folder))
    if not template_files:
        return jsonify({"error": "No template images found"}), 400

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if template_name and template_name in template_files:
        template_path = os.path.join(language_folder, template_name)
    else:
        template_path = os.path.join(language_folder, template_files[0])

    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    try:
        with open(template_path, "rb") as f:
            file_bytes = np.asarray(bytearray(f.read()), dtype=np.uint8)
            template_image = cv2.imdecode(file_bytes, cv2.IMREAD_GRAYSCALE)
    except Exception as e:
        return jsonify({"error": f"Failed to load template image: {str(e)}"}), 400

    if template_image is None:
        return jsonify({"error": "Failed to decode template image"}), 400

    # üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ UUID ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
    file = request.files["image"]
    uploaded_filename = f"uploaded_{uuid.uuid4().hex}.jpg"
    uploaded_path = os.path.join("uploads", uploaded_filename)

    os.makedirs("uploads", exist_ok=True)
    file.save(uploaded_path)

    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
    try:
        with open(uploaded_path, "rb") as f:
            file_bytes = np.asarray(bytearray(f.read()), dtype=np.uint8)
            user_image = cv2.imdecode(file_bytes, cv2.IMREAD_GRAYSCALE)
    except Exception as e:
        return jsonify({"error": f"Failed to load user image: {str(e)}"}), 400

    if user_image is None:
        return jsonify({"error": "Failed to decode user image"}), 400

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö
    user_image = cv2.resize(user_image, (template_image.shape[1], template_image.shape[0]))

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á SSIM
    score, _ = ssim(template_image, user_image, full=True)
    similarity_percentage = round(score * 100, 2)

    return jsonify({
        "score": similarity_percentage,
        "language": language,
        "template_used": os.path.basename(template_path),
    })

if __name__ == "__main__":
    app.run(debug=True)
