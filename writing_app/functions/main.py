import functions_framework
import cv2
import numpy as np
import requests
import firebase_admin
from firebase_admin import storage, firestore
from google.cloud import storage as gcs_storage
from skimage.metrics import structural_similarity as ssim

# ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° Firebase Admin SDK
firebase_admin.initialize_app()

db = firestore.client()
gcs_client = gcs_storage.Client()

@functions_framework.http
def evaluate_writing(request):
    request_json = request.get_json()

    if not request_json:
        return "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 400

    try:
        uid = request_json["uid"]
        language = request_json["language"]
        file_name = request_json["fileName"]
        image_url = request_json["imageUrl"]

        print(f"üì• ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å: {image_url}")

        # ‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏≤‡∏î‡∏à‡∏≤‡∏Å Firebase Storage
        response = requests.get(image_url)
        if response.status_code != 200:
            return "‚ùå ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 500
        
        image_array = np.asarray(bytearray(response.content), dtype=np.uint8)
        user_img = cv2.imdecode(image_array, cv2.IMREAD_GRAYSCALE)

        if user_img is None:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", 500

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏à‡∏≤‡∏Å Firebase Storage
        template_path = f"user_writings/templates/{language}/{file_name}"  
        bucket = gcs_client.bucket("your-firebase-storage-bucket")  # üîπ ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Bucket ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        blob = bucket.blob(template_path)
        
        if not blob.exists():
            return {"error": "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö"}, 400

        template_bytes = blob.download_as_bytes()
        template_array = np.asarray(bytearray(template_bytes), dtype=np.uint8)
        template_img = cv2.imdecode(template_array, cv2.IMREAD_GRAYSCALE)

        if template_img is None:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö", 500

        # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö
        user_img = cv2.resize(user_img, (template_img.shape[1], template_img.shape[0]))

        # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°
        _, user_thresh = cv2.threshold(user_img, 150, 255, cv2.THRESH_BINARY_INV)
        _, template_thresh = cv2.threshold(template_img, 150, 255, cv2.THRESH_BINARY_INV)

        total_pixels = template_thresh.size
        filled_pixels = np.count_nonzero(user_thresh)
        fill_accuracy = round((filled_pixels / total_pixels) * 100, 2)

        # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á SSIM
        ssim_score = ssim(template_thresh, user_thresh)
        ssim_percentage = round(ssim_score * 100, 2)

        print(f"üìä Fill Accuracy: {fill_accuracy}%, SSIM Score: {ssim_percentage}%")

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firestore
        result_ref = db.collection("evaluations").document(uid)
        result_ref.set({
            "userId": uid,
            "language": language,
            "fileName": file_name,
            "imageUrl": image_url,
            "fill_accuracy": fill_accuracy,
            "ssim_score": ssim_percentage,
            "status": "completed",
        }, merge=True)

        return {"status": "success", "fill_accuracy": fill_accuracy, "ssim_score": ssim_percentage}, 200

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return {"status": "error", "message": str(e)}, 500
