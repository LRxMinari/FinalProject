import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'home_page.dart';

class EvaluationPage extends StatefulWidget {
  final String language; // ‡∏†‡∏≤‡∏©‡∏≤ (Thai / English)
  final String character; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ character

  const EvaluationPage({
    super.key,
    required this.language,
    required this.character, // ‡πÉ‡∏™‡πà this.character ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  });

  @override
  _EvaluationPageState createState() => _EvaluationPageState();
}

class _EvaluationPageState extends State<EvaluationPage> {
  String? _downloadUrl; // ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ
  bool _isLoading = false; // ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  String _selectedCharacter = ''; // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

  late List<String> _characters; // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤

  @override
  void initState() {
    super.initState();
    _characters = widget.language == 'English'
        ? List.generate(26, (index) => String.fromCharCode(65 + index)) // A-Z
        : [
            '‡∏Å',
            '‡∏Ç',
            '‡∏É',
            '‡∏Ñ',
            '‡∏Ö',
            '‡∏Ü',
            '‡∏á',
            '‡∏à',
            '‡∏â',
            '‡∏ä',
            '‡∏ã',
            '‡∏å',
            '‡∏ç',
            '‡∏é',
            '‡∏è',
            '‡∏ê',
            '‡∏ë',
            '‡∏í',
            '‡∏ì',
            '‡∏î',
            '‡∏ï',
            '‡∏ñ',
            '‡∏ó',
            '‡∏ò',
            '‡∏ô',
            '‡∏ö',
            '‡∏õ',
            '‡∏ú',
            '‡∏ù',
            '‡∏û',
            '‡∏ü',
            '‡∏†',
            '‡∏°',
            '‡∏¢',
            '‡∏£',
            '‡∏•',
            '‡∏ß',
            '‡∏®',
            '‡∏©',
            '‡∏™',
            '‡∏´',
            '‡∏¨',
            '‡∏≠',
            '‡∏Æ'
          ]; // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢

    if (_characters.isNotEmpty) {
      _selectedCharacter = _characters.first; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
      _fetchImage(_selectedCharacter);
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á UID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  String getCurrentUserUID() {
    final user = FirebaseAuth.instance.currentUser;
    return user?.uid ?? "unknown_user";
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Firebase Storage
  Future<void> _fetchImage(String character) async {
    setState(() {
      _isLoading = true;
      _downloadUrl = null;
    });

    try {
      String uid = getCurrentUserUID();
      String languageFolder = widget.language == "English" ? "English" : "Thai";
      String filePath =
          "user_writings/$uid/$languageFolder/writing_$character.png";

      print("üì¢ Fetching image from: $filePath");

      String downloadUrl =
          await FirebaseStorage.instance.ref(filePath).getDownloadURL();

      setState(() {
        _downloadUrl = downloadUrl;
      });

      print("‚úÖ Image URL: $downloadUrl");
    } catch (e) {
      print("‚ùå Error fetching image: $e");
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (${widget.language})")),
      body: Column(
        children: [
          const SizedBox(height: 10),
          // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: _characters.map((char) {
                return GestureDetector(
                  onTap: () {
                    setState(() {
                      _selectedCharacter = char;
                    });
                    _fetchImage(char);
                  },
                  child: Container(
                    margin: const EdgeInsets.symmetric(horizontal: 5),
                    padding: const EdgeInsets.all(10),
                    decoration: BoxDecoration(
                      color: _selectedCharacter == char
                          ? Colors.blue
                          : Colors.grey[300],
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Text(
                      char,
                      style: TextStyle(
                        fontSize: 18,
                        color: _selectedCharacter == char
                            ? Colors.white
                            : Colors.black,
                      ),
                    ),
                  ),
                );
              }).toList(),
            ),
          ),

          const SizedBox(height: 20),

          // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
          Expanded(
            child: Center(
              child: _isLoading
                  ? const CircularProgressIndicator()
                  : _downloadUrl != null
                      ? Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              "‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô: $_selectedCharacter",
                              style: const TextStyle(
                                  fontSize: 20, fontWeight: FontWeight.bold),
                            ),
                            const SizedBox(height: 10),
                            Image.network(_downloadUrl!,
                                width: 300, height: 300, fit: BoxFit.contain),
                          ],
                        )
                      : const Text("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô",
                          style: TextStyle(color: Colors.red)),
            ),
          ),
        ],
      ),
    );
  }
}
