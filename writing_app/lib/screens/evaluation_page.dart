import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'home_page.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class EvaluationPage extends StatefulWidget {
  final String language;
  final String character;

  const EvaluationPage({
    super.key,
    required this.language,
    required this.character,
  });

  @override
  _EvaluationPageState createState() => _EvaluationPageState();
}

class _EvaluationPageState extends State<EvaluationPage> {
  String? _downloadUrl;
  bool _isLoading = false;
  String _selectedCharacter = '';
  String selectedLanguage = "Thai";
  late List<String> _characters;

  double? _score = 0.0; // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ _score ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error

  @override
  void initState() {
    super.initState();
    _characters =
        selectedLanguage == 'English' ? englishCharacters : thaiCharacters;

    if (_characters.isNotEmpty) {
      _selectedCharacter = _characters.first;
      _fetchImage(_selectedCharacter);
      _fetchScore(_selectedCharacter); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    }
  }

  String getCurrentUserUID() {
    final user = FirebaseAuth.instance.currentUser;
    return user?.uid ?? "unknown_user";
  }

  Future<void> _fetchImage(String character) async {
    setState(() {
      _isLoading = true;
      _downloadUrl = null;
    });

    try {
      String uid = getCurrentUserUID();
      String languageFolder =
          selectedLanguage == "English" ? "English" : "Thai";
      String filePath =
          "user_writings/$uid/$languageFolder/writing_$character.png";

      print("Fetching image from: $filePath");

      String downloadUrl =
          await FirebaseStorage.instance.ref(filePath).getDownloadURL();

      setState(() {
        _downloadUrl = downloadUrl;
      });

      print("Image URL: $downloadUrl");
    } catch (e) {
      print("‚ùå Error fetching image: $e");
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _fetchScore(String character) async {
    setState(() {
      _isLoading = true;
    });

    try {
      String uid = getCurrentUserUID();
      String languageFolder =
          selectedLanguage == "English" ? "English" : "Thai";

      DocumentSnapshot scoreDoc = await FirebaseFirestore.instance
          .collection("evaluations")
          .doc(uid)
          .collection(languageFolder)
          .doc(character)
          .get();

      if (scoreDoc.exists) {
        setState(() {
          _score = scoreDoc["score"].toDouble(); // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Firestore
        });
      } else {
        setState(() {
          _score = 0; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
        });
      }
    } catch (e) {
      print("‚ùå Error fetching score: $e");
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•"),
        backgroundColor: Colors.purple[100],
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pushAndRemoveUntil(
              context,
              MaterialPageRoute(
                  builder: (context) =>
                      HomePage()), // üî• ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô HomePage ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
              (Route<dynamic> route) => false, // ‚ùå ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á
            );
          },
        ),
      ),
      backgroundColor: Colors.purple[50],
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            Expanded(
              flex: 2,
              child: Column(
                children: [
                  Container(
                    height: 300,
                    decoration: BoxDecoration(
                      color: Colors.purple[200],
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Center(
                      child: _isLoading
                          ? const CircularProgressIndicator()
                          : _downloadUrl != null
                              ? Image.network(
                                  _downloadUrl!,
                                  fit: BoxFit.contain,
                                  errorBuilder: (context, error, stackTrace) {
                                    return const Text(
                                      "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
                                      style: TextStyle(
                                          fontSize: 20, color: Colors.white),
                                    );
                                  },
                                )
                              : const Text(
                                  "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
                                  style: TextStyle(
                                      fontSize: 20, color: Colors.white),
                                ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  Text(
                    _score != null
                        ? "${_score!.toStringAsFixed(2)}% ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ"
                        : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô...",
                    style: TextStyle(
                        // ‚ùå ‡∏•‡∏ö `const` ‡∏≠‡∏≠‡∏Å
                        fontSize: 24,
                        fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    "‡∏•‡∏≠‡∏á‡∏ù‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô",
                    style: TextStyle(fontSize: 16),
                  ),
                ],
              ),
            ),

            const SizedBox(width: 16),

            // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤)
            Expanded(
              flex: 1,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      _buildLanguageTab(
                          "Thai", "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", selectedLanguage == "Thai"),
                      _buildLanguageTab("English", "‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
                          selectedLanguage == "English"),
                    ],
                  ),
                  const SizedBox(height: 8),

                  // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                  Expanded(
                    child: GridView.builder(
                      padding: const EdgeInsets.all(8),
                      gridDelegate:
                          const SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 4,
                        childAspectRatio: 1.2,
                        crossAxisSpacing: 6,
                        mainAxisSpacing: 6,
                      ),
                      itemCount: selectedLanguage == "Thai"
                          ? thaiCharacters.length
                          : englishCharacters.length,
                      itemBuilder: (context, index) {
                        String char = selectedLanguage == "Thai"
                            ? thaiCharacters[index]
                            : englishCharacters[index];
                        return _buildCharacterTile(char);
                      },
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤
  Widget _buildLanguageTab(String langCode, String text, bool isSelected) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8),
      child: ElevatedButton(
        onPressed: () {
          setState(() {
            selectedLanguage = langCode;
            _characters =
                selectedLanguage == "Thai" ? thaiCharacters : englishCharacters;
            _selectedCharacter = _characters.first;
            _fetchImage(_selectedCharacter);
          });
          print("‚úÖ Selected language: $selectedLanguage");
        },
        style: ElevatedButton.styleFrom(
          backgroundColor: isSelected ? Colors.purple : Colors.grey[300],
          foregroundColor: isSelected ? Colors.white : Colors.black,
        ),
        child: Text(text),
      ),
    );
  }

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  Widget _buildCharacterTile(String char) {
    return GestureDetector(
      onTap: () {
        setState(() {
          _selectedCharacter = char;
        });
        _fetchImage(char);
        _fetchScore(char); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      },
      child: Container(
        decoration: BoxDecoration(
          color: _selectedCharacter == char ? Colors.purple : Colors.white,
          borderRadius: BorderRadius.circular(10),
          border: Border.all(color: Colors.grey),
        ),
        child: Center(
          child: Text(
            char,
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: _selectedCharacter == char ? Colors.white : Colors.black,
            ),
          ),
        ),
      ),
    );
  }
}

// ‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
List<String> thaiCharacters = [
  "‡∏Å",
  "‡∏Ç",
  "‡∏É",
  "‡∏Ñ",
  "‡∏Ö",
  "‡∏Ü",
  "‡∏á",
  "‡∏à",
  "‡∏â",
  "‡∏ä",
  "‡∏ã",
  "‡∏ç",
  "‡∏é",
  "‡∏è",
  "‡∏ê",
  "‡∏ë",
  "‡∏í",
  "‡∏ì",
  "‡∏î",
  "‡∏ï",
  "‡∏ñ",
  "‡∏ó",
  "‡∏ò",
  "‡∏ô",
  "‡∏ö",
  "‡∏õ",
  "‡∏ú",
  "‡∏ù",
  "‡∏û",
  "‡∏ü",
  "‡∏†",
  "‡∏°",
  "‡∏¢",
  "‡∏£",
  "‡∏•",
  "‡∏ß",
  "‡∏®",
  "‡∏©",
  "‡∏™",
  "‡∏´",
  "‡∏¨",
  "‡∏≠",
  "‡∏Æ"
];

// ‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
List<String> englishCharacters = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z"
];
